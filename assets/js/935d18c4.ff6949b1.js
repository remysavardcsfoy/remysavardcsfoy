"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[456],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},l="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},E=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),l=d(t),E=a,m=l["".concat(c,".").concat(E)]||l[E]||p[E]||s;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=E;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[l]="string"==typeof e?e:a,o[1]=i;for(var d=2;d<s;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}E.displayName="MDXCreateElement"},7072:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const s={id:"A17-OtherHooks",title:"Other Hooks",sidebar_label:"Other Hooks",slug:"/other-hooks"},o=void 0,i={unversionedId:"A17-OtherHooks",id:"A17-OtherHooks",title:"Other Hooks",description:"Use Reducer",source:"@site/docs/A17-OtherHooks.md",sourceDirName:".",slug:"/other-hooks",permalink:"/docs/other-hooks",draft:!1,tags:[],version:"current",frontMatter:{id:"A17-OtherHooks",title:"Other Hooks",sidebar_label:"Other Hooks",slug:"/other-hooks"}},c={},d=[{value:"Use Reducer",id:"use-reducer",level:2},{value:"useReducer Example Application",id:"usereducer-example-application",level:3}],u={toc:d},l="wrapper";function p(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"use-reducer"},"Use Reducer"),(0,a.kt)("h3",{id:"usereducer-example-application"},"useReducer Example Application"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Rewrite of the ",(0,a.kt)("a",{parentName:"p",href:"https://handsonreact.com/docs/react-redux-thunk"},"Redux example application"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'function ID() {\n  return "_" + Math.random().toString(36).substr(2, 9);\n}\n\nclass Item {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n}\n\nconst baseUrl = "http://localhost:3000";\n\nclass ItemAPI {\n  url = `${baseUrl}/items`;\n\n  constructor() {}\n\n  getAll(page = 1, limit = 100) {\n    return fetch(`${this.url}?_page=${page}&_limit=${limit}`)\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  add(item) {\n    return fetch(`${this.url}`, {\n      method: "POST",\n      body: JSON.stringify(item),\n      headers: {\n        "Content-Type": "application/json",\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  update(item) {\n    return fetch(`${this.url}/${item.id}`, {\n      method: "PUT",\n      body: JSON.stringify(item),\n      headers: {\n        "Content-Type": "application/json",\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  delete(id) {\n    return fetch(`${this.url}/${id}`, {\n      method: "DELETE",\n      headers: {\n        "Content-Type": "application/json",\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  static translateStatusToErrorMessage(status) {\n    switch (status) {\n      case 401:\n        return "Please login again.";\n      case 403:\n        return "You do not have permission to view the items.";\n      default:\n        return "There was an error retrieving the items. Please try again.";\n    }\n  }\n\n  //pass translate in to make this more flexible\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const httpErrorInfo = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      };\n      console.log(\n        `logging http details for debugging: ${JSON.stringify(httpErrorInfo)}`\n      );\n\n      let errorMessage = ItemAPI.translateStatusToErrorMessage(\n        httpErrorInfo.status\n      );\n      throw new Error(errorMessage);\n    }\n  }\n\n  parseJSON(response) {\n    return response.json();\n  }\n}\n\n// REDUX -------------------\n\n//action types\nconst LOAD_ITEMS_REQUEST = "LOAD_ITEMS_REQUEST";\nconst LOAD_ITEMS_SUCCESS = "LOAD_ITEMS_SUCCESS";\nconst LOAD_ITEMS_FAILURE = "LOAD_ITEMS_FAILURE";\nconst ADD_ITEM_REQUEST = "ADD_ITEM_REQUEST";\nconst ADD_ITEM_SUCCESS = "ADD_ITEM_SUCCESS";\nconst ADD_ITEM_FAILURE = "ADD_ITEM_FAILURE";\nconst UPDATE_ITEM_REQUEST = "UPDATE_ITEM_REQUEST";\nconst UPDATE_ITEM_SUCCESS = "UPDATE_ITEM_SUCCESS";\nconst UPDATE_ITEM_FAILURE = "UPDATE_ITEM_FAILURE";\nconst DELETE_ITEM_REQUEST = "DELETE_ITEM_REQUEST";\nconst DELETE_ITEM_SUCCESS = "DELETE_ITEM_SUCCESS";\nconst DELETE_ITEM_FAILURE = "DELETE_ITEM_FAILURE";\n\n//state (initial)\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null,\n};\n\n//reducer\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_ITEMS_REQUEST:\n      return { ...state, loading: true };\n    case LOAD_ITEMS_SUCCESS:\n      return { ...state, loading: false, items: action.payload };\n    case LOAD_ITEMS_FAILURE:\n      return { ...state, loading: false, error: action.payload.message };\n    case ADD_ITEM_REQUEST:\n      return { ...state };\n    case ADD_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: [...state.items, action.payload],\n      };\n    case ADD_ITEM_FAILURE:\n      return { ...state, loading: false, error: action.payload.message };\n    case UPDATE_ITEM_REQUEST:\n      return { ...state };\n    case UPDATE_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: state.items.map((item) => {\n          return item.id === action.payload.id\n            ? Object.assign({}, item, action.payload)\n            : item;\n        }),\n      };\n    case UPDATE_ITEM_FAILURE:\n      return { ...state, error: action.payload.message };\n    case DELETE_ITEM_REQUEST:\n      return { ...state };\n    case DELETE_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: state.items.filter((item) => item.id !== action.payload.id),\n      };\n    case DELETE_ITEM_FAILURE:\n      return { ...state, error: action.payload.message };\n    default:\n      return state;\n  }\n}\n\n//action creators\nfunction loadItems(dispatch) {\n  let itemAPI = new ItemAPI();\n  dispatch({ type: LOAD_ITEMS_REQUEST });\n  return itemAPI\n    .getAll(1)\n    .then((data) => {\n      dispatch({ type: LOAD_ITEMS_SUCCESS, payload: data });\n    })\n    .catch((error) => {\n      dispatch({ type: LOAD_ITEMS_FAILURE, payload: error });\n    });\n}\n\nfunction addItem(item, dispatch) {\n  let itemAPI = new ItemAPI();\n  dispatch({ type: ADD_ITEM_REQUEST });\n  return itemAPI\n    .add(item)\n    .then((data) => {\n      dispatch({ type: ADD_ITEM_SUCCESS, payload: data });\n    })\n    .catch((error) => {\n      dispatch({ type: ADD_ITEM_FAILURE, payload: error });\n    });\n}\n\nfunction updateItem(item, dispatch) {\n  let itemAPI = new ItemAPI();\n  dispatch({ type: UPDATE_ITEM_REQUEST });\n  return itemAPI\n    .update(item)\n    .then((data) => {\n      dispatch({ type: UPDATE_ITEM_SUCCESS, payload: data });\n    })\n    .catch((error) => {\n      dispatch({ type: UPDATE_ITEM_FAILURE, payload: error });\n    });\n}\n\nfunction deleteItem(item, dispatch) {\n  let itemAPI = new ItemAPI();\n  dispatch({ type: DELETE_ITEM_REQUEST });\n  return itemAPI\n    .delete(item.id)\n    .then((data) => {\n      dispatch({ type: DELETE_ITEM_SUCCESS, payload: item });\n    })\n    .catch((error) => {\n      dispatch({ type: DELETE_ITEM_FAILURE, payload: error });\n    });\n}\n\n// //store\n// var ReduxThunk = window.ReduxThunk;\n// const compose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;\n// const store = Redux.createStore(\n//   reducer,\n//   compose(Redux.applyMiddleware(...[ReduxThunk]))\n// );\n\n// UI ---------------------------------\nfunction List(props) {\n  const { items, onRemove, onUpdate, loading, error, dispatch } = props;\n  const [editingItem, setEditingItem] = React.useState(null);\n  //   const dispatch = ReactRedux.useDispatch();\n\n  const handleEditClick = (item) => {\n    setEditingItem(item);\n  };\n\n  const handleCancel = () => {\n    setEditingItem(null);\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  } else if (error) {\n    return <div>{error}</div>;\n  } else {\n    return (\n      <ul>\n        {items.map((item) => (\n          <li key={item.id}>\n            {item === editingItem ? (\n              <Form\n                item={item}\n                onSubmit={onUpdate}\n                onCancel={handleCancel}\n                dispatch={dispatch}\n              />\n            ) : (\n              <p>\n                <span>{item.name}</span>\n                <button onClick={() => handleEditClick(item)}>Edit</button>\n                {/* <button onClick={() => dispatch(deleteItem(item))}> */}\n                <button onClick={() => deleteItem(item, dispatch)}>\n                  Remove\n                </button>\n              </p>\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nfunction Form({ item, onCancel, buttonValue, dispatch }) {\n  const [inputValue, setInputValue] = React.useState(item.name || "");\n  //   const dispatch = ReactRedux.useDispatch();\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    const isNew = !item.id;\n    const submittedItem = {\n      id: item ? item.id : ID(),\n      name: inputValue,\n    };\n\n    if (isNew) {\n      //   dispatch(addItem(submittedItem));\n      addItem(submittedItem, dispatch);\n    } else {\n      //   dispatch(updateItem(submittedItem));\n      updateItem(submittedItem, dispatch);\n    }\n\n    setInputValue("");\n  };\n\n  const handleCancel = (event) => {\n    event.preventDefault();\n    onCancel();\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <input value={inputValue} onChange={handleChange} />\n      <button>{buttonValue || "Save"}</button>\n      {onCancel && (\n        <a href="#" onClick={handleCancel}>\n          cancel\n        </a>\n      )}\n    </form>\n  );\n}\n\nfunction Container() {\n  //   const items = ReactRedux.useSelector((state) => state.items);\n  //   const loading = ReactRedux.useSelector((state) => state.loading);\n  //   const error = ReactRedux.useSelector((state) => state.error);\n  //   const dispatch = ReactRedux.useDispatch();\n  const [{ loading, error, items }, dispatch] = React.useReducer(\n    reducer,\n    initialState\n  );\n\n  React.useEffect(() => {\n    // dispatch(loadItems());\n    loadItems(dispatch);\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Form item="" buttonValue="Add" dispatch={dispatch} />\n      <List loading={loading} error={error} items={items} dispatch={dispatch} />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      {/* <ReactRedux.Provider store={store}> */}\n      <Container />\n      {/* </ReactRedux.Provider> */}\n    </div>\n  );\n}\nReactDOM.createRoot(document.getElementById("root")).render(<App />);\n')))}p.isMDXComponent=!0}}]);