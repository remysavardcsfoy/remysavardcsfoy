"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[1779],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>m});var a=t(7294);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function s(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},s=Object.keys(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(n);for(a=0;a<s.length;a++)t=s[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var c=a.createContext({}),d=function(n){var e=a.useContext(c),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},l=function(n){var e=d(n.components);return a.createElement(c.Provider,{value:e},n.children)},u="mdxType",p={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},E=a.forwardRef((function(n,e){var t=n.components,r=n.mdxType,s=n.originalType,c=n.parentName,l=o(n,["components","mdxType","originalType","parentName"]),u=d(t),E=r,m=u["".concat(c,".").concat(E)]||u[E]||p[E]||s;return t?a.createElement(m,i(i({ref:e},l),{},{components:t})):a.createElement(m,i({ref:e},l))}));function m(n,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof n||r){var s=t.length,i=new Array(s);i[0]=E;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=n,o[u]="string"==typeof n?n:r,i[1]=o;for(var d=2;d<s;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}E.displayName="MDXCreateElement"},5260:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var a=t(7462),r=(t(7294),t(3905));const s={title:"React Redux Thunk",sidebar_label:"React Redux Thunk",slug:"/react-redux-thunk"},i=void 0,o={unversionedId:"ReactReduxThunk",id:"ReactReduxThunk",title:"React Redux Thunk",description:"Setup",source:"@site/docs/24-ReactReduxThunk.md",sourceDirName:".",slug:"/react-redux-thunk",permalink:"/docs/react-redux-thunk",draft:!1,tags:[],version:"current",sidebarPosition:24,frontMatter:{title:"React Redux Thunk",sidebar_label:"React Redux Thunk",slug:"/react-redux-thunk"}},c={},d=[{value:"Setup",id:"setup",level:2},{value:"Example Application using Function Components",id:"example-application-using-function-components",level:2},{value:"Example Application using Class Components",id:"example-application-using-class-components",level:2},{value:"Notes",id:"notes",level:2}],l={toc:d},u="wrapper";function p(n){let{components:e,...t}=n;return(0,r.kt)(u,(0,a.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"setup"},"Setup"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you previously completed the ",(0,r.kt)("a",{parentName:"p",href:"/docs/http"},"HTTP")," demos these three setup ",(0,r.kt)("strong",{parentName:"p"},"steps")," were ",(0,r.kt)("strong",{parentName:"p"},"already")," ",(0,r.kt)("strong",{parentName:"p"},"completed")," in that section.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Verify ",(0,r.kt)("a",{parentName:"li",href:"/docs/http#stylescss"},"these styles")," have been added to the ",(0,r.kt)("inlineCode",{parentName:"li"},"demos")," project"),(0,r.kt)("li",{parentName:"ol"},"Verify the ",(0,r.kt)("a",{parentName:"li",href:"/docs/backend-api-setup"},"backend API setup detailed here")," has been completed."),(0,r.kt)("li",{parentName:"ol"},"Verify the ",(0,r.kt)("a",{parentName:"li",href:"/docs/http#apidbjson"},"items")," have been added to ",(0,r.kt)("inlineCode",{parentName:"li"},"db.json"),".")),(0,r.kt)("h2",{id:"example-application-using-function-components"},"Example Application using Function Components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"function ID() {\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nclass Item {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n}\n\nconst baseUrl = 'http://localhost:3000';\n\nclass ItemAPI {\n  url = `${baseUrl}/items`;\n\n  constructor() {}\n\n  getAll(page = 1, limit = 100) {\n    return fetch(`${this.url}?_page=${page}&_limit=${limit}`)\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  add(item) {\n    return fetch(`${this.url}`, {\n      method: 'POST',\n      body: JSON.stringify(item),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  update(item) {\n    return fetch(`${this.url}/${item.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(item),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  delete(id) {\n    return fetch(`${this.url}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  static translateStatusToErrorMessage(status) {\n    switch (status) {\n      case 401:\n        return 'Please login again.';\n      case 403:\n        return 'You do not have permission to view the items.';\n      default:\n        return 'There was an error retrieving the items. Please try again.';\n    }\n  }\n\n  //pass translate in to make this more flexible\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const httpErrorInfo = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      };\n      console.log(\n        `logging http details for debugging: ${JSON.stringify(httpErrorInfo)}`\n      );\n\n      let errorMessage = ItemAPI.translateStatusToErrorMessage(\n        httpErrorInfo.status\n      );\n      throw new Error(errorMessage);\n    }\n  }\n\n  parseJSON(response) {\n    return response.json();\n  }\n}\n\n// REDUX -------------------\n\n//action types\nconst LOAD_ITEMS_REQUEST = 'LOAD_ITEMS_REQUEST';\nconst LOAD_ITEMS_SUCCESS = 'LOAD_ITEMS_SUCCESS';\nconst LOAD_ITEMS_FAILURE = 'LOAD_ITEMS_FAILURE';\nconst ADD_ITEM_REQUEST = 'ADD_ITEM_REQUEST';\nconst ADD_ITEM_SUCCESS = 'ADD_ITEM_SUCCESS';\nconst ADD_ITEM_FAILURE = 'ADD_ITEM_FAILURE';\nconst UPDATE_ITEM_REQUEST = 'UPDATE_ITEM_REQUEST';\nconst UPDATE_ITEM_SUCCESS = 'UPDATE_ITEM_SUCCESS';\nconst UPDATE_ITEM_FAILURE = 'UPDATE_ITEM_FAILURE';\nconst DELETE_ITEM_REQUEST = 'DELETE_ITEM_REQUEST';\nconst DELETE_ITEM_SUCCESS = 'DELETE_ITEM_SUCCESS';\nconst DELETE_ITEM_FAILURE = 'DELETE_ITEM_FAILURE';\n\n//state (initial)\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null,\n};\n\n//reducer\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_ITEMS_REQUEST:\n      return { ...state, loading: true };\n    case LOAD_ITEMS_SUCCESS:\n      return { ...state, loading: false, items: action.payload };\n    case LOAD_ITEMS_FAILURE:\n      return { ...state, loading: false, error: action.payload.message };\n    case ADD_ITEM_REQUEST:\n      return { ...state };\n    case ADD_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: [...state.items, action.payload],\n      };\n    case ADD_ITEM_FAILURE:\n      return { ...state, loading: false, error: action.payload.message };\n    case UPDATE_ITEM_REQUEST:\n      return { ...state };\n    case UPDATE_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: state.items.map((item) => {\n          return item.id === action.payload.id\n            ? Object.assign({}, item, action.payload)\n            : item;\n        }),\n      };\n    case UPDATE_ITEM_FAILURE:\n      return { ...state, error: action.payload.message };\n    case DELETE_ITEM_REQUEST:\n      return { ...state };\n    case DELETE_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: state.items.filter((item) => item.id !== action.payload.id),\n      };\n    case DELETE_ITEM_FAILURE:\n      return { ...state, error: action.payload.message };\n    default:\n      return state;\n  }\n}\n\n//action creators\nfunction loadItems() {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: LOAD_ITEMS_REQUEST });\n    return itemAPI\n      .getAll(1)\n      .then((data) => {\n        dispatch({ type: LOAD_ITEMS_SUCCESS, payload: data });\n      })\n      .catch((error) => {\n        dispatch({ type: LOAD_ITEMS_FAILURE, payload: error });\n      });\n  };\n}\n\nfunction addItem(item) {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: ADD_ITEM_REQUEST });\n    return itemAPI\n      .add(item)\n      .then((data) => {\n        dispatch({ type: ADD_ITEM_SUCCESS, payload: data });\n      })\n      .catch((error) => {\n        dispatch({ type: ADD_ITEM_FAILURE, payload: error });\n      });\n  };\n}\n\nfunction updateItem(item) {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: UPDATE_ITEM_REQUEST });\n    return itemAPI\n      .update(item)\n      .then((data) => {\n        dispatch({ type: UPDATE_ITEM_SUCCESS, payload: data });\n      })\n      .catch((error) => {\n        dispatch({ type: UPDATE_ITEM_FAILURE, payload: error });\n      });\n  };\n}\n\nfunction deleteItem(item) {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: DELETE_ITEM_REQUEST });\n    return itemAPI\n      .delete(item.id)\n      .then((data) => {\n        dispatch({ type: DELETE_ITEM_SUCCESS, payload: item });\n      })\n      .catch((error) => {\n        dispatch({ type: DELETE_ITEM_FAILURE, payload: error });\n      });\n  };\n}\n\n//store\nvar ReduxThunk = window.ReduxThunk;\nconst compose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;\nconst store = Redux.createStore(\n  reducer,\n  compose(Redux.applyMiddleware(...[ReduxThunk]))\n);\n\n// UI ---------------------------------\nfunction List(props) {\n  const { items, loading, error } = props;\n  const [editingItem, setEditingItem] = React.useState(null);\n  const dispatch = ReactRedux.useDispatch();\n\n  const handleEditClick = (item) => {\n    setEditingItem(item);\n  };\n\n  const handleCancel = () => {\n    setEditingItem(null);\n  };\n\n  if (loading) {\n    return <div>Loading...</div>;\n  } else if (error) {\n    return <div>{error}</div>;\n  } else {\n    return (\n      <ul>\n        {items.map((item) => (\n          <li key={item.id}>\n            {item === editingItem ? (\n              <Form item={item} onCancel={handleCancel} />\n            ) : (\n              <p>\n                <span>{item.name}</span>\n                <button onClick={() => handleEditClick(item)}>Edit</button>\n                <button onClick={() => dispatch(deleteItem(item))}>\n                  Remove\n                </button>\n              </p>\n            )}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nfunction Form({ item, onCancel, buttonValue }) {\n  const [inputValue, setInputValue] = React.useState(item.name || '');\n  const dispatch = ReactRedux.useDispatch();\n\n  const handleChange = (event) => {\n    event.preventDefault();\n    setInputValue(event.target.value);\n  };\n\n  const handleFormSubmit = (event) => {\n    event.preventDefault();\n    const isNew = !item.id;\n    const submittedItem = {\n      id: item ? item.id : ID(),\n      name: inputValue,\n    };\n\n    if (isNew) {\n      dispatch(addItem(submittedItem));\n    } else {\n      dispatch(updateItem(submittedItem));\n    }\n\n    setInputValue('');\n  };\n\n  const handleCancel = (event) => {\n    event.preventDefault();\n    onCancel();\n  };\n\n  return (\n    <form onSubmit={handleFormSubmit}>\n      <input value={inputValue} onChange={handleChange} />\n      <button>{buttonValue || 'Save'}</button>\n      {onCancel && (\n        <a href=\"#\" onClick={handleCancel}>\n          cancel\n        </a>\n      )}\n    </form>\n  );\n}\n\nfunction Container() {\n  const items = ReactRedux.useSelector((state) => state.items);\n  const loading = ReactRedux.useSelector((state) => state.loading);\n  const error = ReactRedux.useSelector((state) => state.error);\n  const dispatch = ReactRedux.useDispatch();\n\n  React.useEffect(() => {\n    dispatch(loadItems());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <Form item=\"\" buttonValue=\"Add\" />\n      <List loading={loading} error={error} items={items} />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <div>\n      <ReactRedux.Provider store={store}>\n        <Container />\n      </ReactRedux.Provider>\n    </div>\n  );\n}\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\n")),(0,r.kt)("h2",{id:"example-application-using-class-components"},"Example Application using Class Components"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// API ----------\nfunction ID() {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return '_' + Math.random().toString(36).substr(2, 9);\n}\n\nclass Item {\n  constructor(id, name) {\n    this.id = id;\n    this.name = name;\n  }\n}\n\nconst baseUrl = 'http://localhost:3000';\n\nclass ItemAPI {\n  url = `${baseUrl}/items`;\n\n  constructor() {}\n\n  getAll(page = 1, limit = 100) {\n    return fetch(`${this.url}?_page=${page}&_limit=${limit}`)\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  add(item) {\n    return fetch(`${this.url}`, {\n      method: 'POST',\n      body: JSON.stringify(item),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  update(item) {\n    return fetch(`${this.url}/${item.id}`, {\n      method: 'PUT',\n      body: JSON.stringify(item),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  delete(id) {\n    return fetch(`${this.url}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(this.checkStatus)\n      .then(this.parseJSON);\n  }\n\n  static translateStatusToErrorMessage(status) {\n    switch (status) {\n      case 401:\n        return 'Please login again.';\n      case 403:\n        return 'You do not have permission to view the items.';\n      default:\n        return 'There was an error retrieving the items. Please try again.';\n    }\n  }\n\n  //pass translate in to make this more flexible\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const httpErrorInfo = {\n        status: response.status,\n        statusText: response.statusText,\n        url: response.url,\n      };\n      console.log(\n        `logging http details for debugging: ${JSON.stringify(httpErrorInfo)}`\n      );\n\n      let errorMessage = ItemAPI.translateStatusToErrorMessage(\n        httpErrorInfo.status\n      );\n      throw new Error(errorMessage);\n    }\n  }\n\n  parseJSON(response) {\n    return response.json();\n  }\n}\n\n// REDUX -------------------\n\n//action types\nconst LOAD_ITEMS_REQUEST = 'LOAD_ITEMS_REQUEST';\nconst LOAD_ITEMS_SUCCESS = 'LOAD_ITEMS_SUCCESS';\nconst LOAD_ITEMS_FAILURE = 'LOAD_ITEMS_FAILURE';\nconst ADD_ITEM_REQUEST = 'ADD_ITEM_REQUEST';\nconst ADD_ITEM_SUCCESS = 'ADD_ITEM_SUCCESS';\nconst ADD_ITEM_FAILURE = 'ADD_ITEM_FAILURE';\nconst UPDATE_ITEM_REQUEST = 'UPDATE_ITEM_REQUEST';\nconst UPDATE_ITEM_SUCCESS = 'UPDATE_ITEM_SUCCESS';\nconst UPDATE_ITEM_FAILURE = 'UPDATE_ITEM_FAILURE';\nconst DELETE_ITEM_REQUEST = 'DELETE_ITEM_REQUEST';\nconst DELETE_ITEM_SUCCESS = 'DELETE_ITEM_SUCCESS';\nconst DELETE_ITEM_FAILURE = 'DELETE_ITEM_FAILURE';\n\n//state (initial)\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null,\n};\n\n//reducer\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case LOAD_ITEMS_REQUEST:\n      return { ...state, loading: true };\n    case LOAD_ITEMS_SUCCESS:\n      return { ...state, loading: false, items: action.payload };\n    case LOAD_ITEMS_FAILURE:\n      return { ...state, loading: false, error: action.payload.message };\n    case ADD_ITEM_REQUEST:\n      return { ...state };\n    case ADD_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: [...state.items, action.payload],\n      };\n    case ADD_ITEM_FAILURE:\n      return { ...state, loading: false, error: action.payload.message };\n    case UPDATE_ITEM_REQUEST:\n      return { ...state };\n    case UPDATE_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: state.items.map((item) => {\n          return item.id === action.payload.id\n            ? Object.assign({}, item, action.payload)\n            : item;\n        }),\n      };\n    case UPDATE_ITEM_FAILURE:\n      return { ...state, error: action.payload.message };\n    case DELETE_ITEM_REQUEST:\n      return { ...state };\n    case DELETE_ITEM_SUCCESS:\n      return {\n        ...state,\n        items: state.items.filter((item) => item.id !== action.payload.id),\n      };\n    case DELETE_ITEM_FAILURE:\n      return { ...state, error: action.payload.message };\n    default:\n      return state;\n  }\n}\n\n//action creators\nfunction loadItems() {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: LOAD_ITEMS_REQUEST });\n    return itemAPI\n      .getAll(1)\n      .then((data) => {\n        dispatch({ type: LOAD_ITEMS_SUCCESS, payload: data });\n      })\n      .catch((error) => {\n        dispatch({ type: LOAD_ITEMS_FAILURE, payload: error });\n      });\n  };\n}\n\nfunction addItem(item) {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: ADD_ITEM_REQUEST });\n    return itemAPI\n      .add(item)\n      .then((data) => {\n        dispatch({ type: ADD_ITEM_SUCCESS, payload: data });\n      })\n      .catch((error) => {\n        dispatch({ type: ADD_ITEM_FAILURE, payload: error });\n      });\n  };\n}\n\nfunction updateItem(item) {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: UPDATE_ITEM_REQUEST });\n    return itemAPI\n      .update(item)\n      .then((data) => {\n        dispatch({ type: UPDATE_ITEM_SUCCESS, payload: data });\n      })\n      .catch((error) => {\n        dispatch({ type: UPDATE_ITEM_FAILURE, payload: error });\n      });\n  };\n}\n\nfunction deleteItem(item) {\n  return (dispatch) => {\n    let itemAPI = new ItemAPI();\n    dispatch({ type: DELETE_ITEM_REQUEST });\n    return itemAPI\n      .delete(item.id)\n      .then((data) => {\n        dispatch({ type: DELETE_ITEM_SUCCESS, payload: item });\n      })\n      .catch((error) => {\n        dispatch({ type: DELETE_ITEM_FAILURE, payload: error });\n      });\n  };\n}\n\n//store\nvar ReduxThunk = window.ReduxThunk;\nconst compose = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || Redux.compose;\nconst store = Redux.createStore(\n  reducer,\n  compose(Redux.applyMiddleware(...[ReduxThunk]))\n);\n\n// UI ---------------------------------\n\nclass List extends React.Component {\n  state = {\n    editingItem: null,\n  };\n\n  handleEditClick = (item) => {\n    this.setState({ editingItem: item });\n  };\n\n  handleCancel = (item) => {\n    this.setState({ editingItem: null });\n  };\n\n  render() {\n    const { items, onRemove, onUpdate, loading, error } = this.props;\n\n    if (loading) {\n      return <div>Loading...</div>;\n    } else if (error) {\n      return <div>{error}</div>;\n    } else {\n      return (\n        <ul>\n          {items.map((item) => (\n            <li key={item.id}>\n              {item === this.state.editingItem ? (\n                <Form\n                  item={item}\n                  onSubmit={onUpdate}\n                  onCancel={this.handleCancel}\n                />\n              ) : (\n                <p>\n                  <span>{item.name}</span>\n                  <button onClick={() => this.handleEditClick(item)}>\n                    Edit\n                  </button>\n                  <button onClick={() => onRemove(item)}>Remove</button>\n                </p>\n              )}\n            </li>\n          ))}\n        </ul>\n      );\n    }\n  }\n}\n\nclass Form extends React.Component {\n  state = {\n    inputValue: this.props.item.name || '',\n  };\n\n  handleChange = (event) => {\n    event.preventDefault();\n    this.setState({ inputValue: event.target.value });\n  };\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    const item = {\n      id: this.props.item ? this.props.item.id : ID(),\n      name: this.state.inputValue,\n    };\n\n    this.props.onSubmit(item);\n    this.setState({ inputValue: '' });\n  };\n\n  handleCancel = (event) => {\n    event.preventDefault();\n    this.props.onCancel();\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleFormSubmit}>\n        <input value={this.state.inputValue} onChange={this.handleChange} />\n        <button>{this.props.buttonValue || 'Save'}</button>\n        {this.props.onCancel && (\n          <a href=\"#\" onClick={this.handleCancel}>\n            cancel\n          </a>\n        )}\n      </form>\n    );\n  }\n}\n\nclass Container extends React.Component {\n  componentDidMount() {\n    this.props.onLoad();\n  }\n\n  render() {\n    return (\n      <div>\n        <Form item=\"\" onSubmit={this.props.onAdd} buttonValue=\"Add\" />\n        <List {...this.props} />\n      </div>\n    );\n  }\n}\n\n// React Redux (connect)---------------\nfunction mapStateToProps(state) {\n  return {\n    items: state.items,\n    loading: state.loading,\n    error: state.error,\n  };\n}\n\n// // Same thing, just with lots of ES6 shorthand\n// const mapState = ({ items, loading, error }) => ({\n//   items,\n//   loading,\n//   error\n// });\n\nconst mapDispatchToProps = {\n  onLoad: loadItems,\n  onAdd: addItem,\n  onUpdate: updateItem,\n  onRemove: deleteItem,\n};\nconst ConnectedContainer = ReactRedux.connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Container);\n\n// App\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <ReactRedux.Provider store={store}>\n          <ConnectedContainer />\n        </ReactRedux.Provider>\n      </div>\n    );\n  }\n}\n\nReactDOM.createRoot(document.getElementById('root')).render(<App />);\n")),(0,r.kt)("h2",{id:"notes"},"Notes"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When dealing with this much code in one file make sure things are defined before they are used."),(0,r.kt)("li",{parentName:"ul"},"For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"List")," would be undefined if you tried to connect it before it was defined further down in ",(0,r.kt)("inlineCode",{parentName:"li"},"main.js"),".")))}p.isMDXComponent=!0}}]);