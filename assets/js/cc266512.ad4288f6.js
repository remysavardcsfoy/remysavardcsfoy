"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[2339],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),k=o,u=m["".concat(i,".").concat(k)]||m[k]||d[k]||a;return n?r.createElement(u,s(s({ref:t},l),{},{components:n})):r.createElement(u,s({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=k;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[m]="string"==typeof e?e:o,s[1]=c;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},3266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={title:"Testing Lab 7: Action Tests"},s=void 0,c={unversionedId:"labs/ts/T7-ActionTests",id:"labs/ts/T7-ActionTests",title:"Testing Lab 7: Action Tests",description:"Objectives",source:"@site/docs/labs/ts/T7-ActionTests.md",sourceDirName:"labs/ts",slug:"/labs/ts/T7-ActionTests",permalink:"/docs/labs/ts/T7-ActionTests",draft:!1,tags:[],version:"current",frontMatter:{title:"Testing Lab 7: Action Tests"}},i={},p=[{value:"Objectives",id:"objectives",level:2},{value:"Steps",id:"steps",level:2},{value:"Mock the API",id:"mock-the-api",level:3},{value:"Mock the Store",id:"mock-the-store",level:3},{value:"Test Success and Failure",id:"test-success-and-failure",level:3},{value:"<code>src/projects/state/__tests__/projectActions-test.ts</code>",id:"srcprojectsstate__tests__projectactions-testts-1",level:4},{value:"<code>src/projects/state/__tests__/projectActions-test.ts</code>",id:"srcprojectsstate__tests__projectactions-testts-2",level:4},{value:"\u2714 You have completed Lab 7",id:"-you-have-completed-lab-7",level:3}],l={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"objectives"},"Objectives"),(0,o.kt)("ul",{className:"contains-task-list"},(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Mock the API"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Mock the Store"),(0,o.kt)("li",{parentName:"ul",className:"task-list-item"},(0,o.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Test Success and Failure")),(0,o.kt)("h2",{id:"steps"},"Steps"),(0,o.kt)("h3",{id:"mock-the-api"},"Mock the API"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the directory ",(0,o.kt)("inlineCode",{parentName:"p"},"src\\projects\\__mocks__"),"."),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"__mocks__")," begins and ends with two underscores and is case-sensitive"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the file ",(0,o.kt)("inlineCode",{parentName:"p"},"src\\projects\\__mocks__\\projectAPI.ts")," to mock the ",(0,o.kt)("inlineCode",{parentName:"p"},"projectAPI"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Mock the ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method."),(0,o.kt)("h4",{parentName:"li",id:"srcprojects__mocks__projectapits"},(0,o.kt)("inlineCode",{parentName:"h4"},"src\\projects\\__mocks__\\projectAPI.ts")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { MOCK_PROJECTS } from '../MockProjects';\nconst projectAPI = {\n  get(page = 1, limit = 20) {\n    return Promise.resolve(MOCK_PROJECTS);\n  },\n};\n\nexport { projectAPI };\n")))),(0,o.kt)("h3",{id:"mock-the-store"},"Mock the Store"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Open")," a ",(0,o.kt)("inlineCode",{parentName:"p"},"command prompt")," (Windows) or ",(0,o.kt)("inlineCode",{parentName:"p"},"terminal")," (Mac).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Change the ",(0,o.kt)("strong",{parentName:"p"},"current directory")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"working\\keeptrack"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Run")," ",(0,o.kt)("em",{parentName:"p"},"one")," of the following sets of commands:"),(0,o.kt)("h4",{parentName:"li",id:"npm"},"npm"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"}," npm install redux-mock-store @types/redux-mock-store --save-dev\n")),(0,o.kt)("h4",{parentName:"li",id:"yarn"},"Yarn"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add redux-mock-store @types/redux-mock-store --save-dev\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the directory ",(0,o.kt)("inlineCode",{parentName:"p"},"src\\projects\\state\\__tests__"),"."),(0,o.kt)("blockquote",{parentName:"li"},(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("inlineCode",{parentName:"p"},"__tests__")," begins and ends with two underscores and is case-sensitive"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create the file ",(0,o.kt)("inlineCode",{parentName:"p"},"src\\projects\\state\\__tests__\\projectActions-test.ts"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the test setup code including mocking the store away."),(0,o.kt)("h4",{parentName:"li",id:"srcprojectsstate__tests__projectactions-testts"},(0,o.kt)("inlineCode",{parentName:"h4"},"src\\projects\\state\\__tests__\\projectActions-test.ts")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import configureMockStore from 'redux-mock-store';\nimport ReduxThunk from 'redux-thunk';\nimport { initialAppState } from '../../../state';\nimport { loadProjects } from '../projectActions';\nimport {\n  LOAD_PROJECTS_REQUEST,\n  LOAD_PROJECTS_SUCCESS,\n  LOAD_PROJECTS_FAILURE,\n} from '../projectTypes';\nimport { projectAPI } from '../../projectAPI';\nimport { MOCK_PROJECTS } from '../../MockProjects';\njest.mock('../../projectAPI');\n\nconst middlewares = [ReduxThunk];\nconst mockStoreCreator = configureMockStore(middlewares);\n\ndescribe('Project Actions', () => {\n  let store: any;\n\n  beforeEach(() => {\n    store = mockStoreCreator(initialAppState);\n  });\n});\n")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"jest.mock")," replaces the actual implementation of the ",(0,o.kt)("inlineCode",{parentName:"p"},"projectAPI")," with the mock we created in the last step. This is done by convention in Jest which replaces the implementation with the exported function or object in the ",(0,o.kt)("inlineCode",{parentName:"p"},"__mocks__")," directory.")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"At this point, you will receive the following error:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"FAIL  src/projects/state/__tests__/projectActions-test.ts\n\u25cf Test suite failed to run\n\n Your test suite must contain at least one test.\n")))),(0,o.kt)("h3",{id:"test-success-and-failure"},"Test Success and Failure"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Attempt to test that the projects load successfully by adding the code.")),(0,o.kt)("h4",{id:"srcprojectsstate__tests__projectactions-testts-1"},(0,o.kt)("inlineCode",{parentName:"h4"},"src/projects/state/__tests__/projectActions-test.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"import configureMockStore from 'redux-mock-store';\nimport ReduxThunk from 'redux-thunk';\nimport { initialAppState } from '../../../state';\nimport { loadProjects } from '../projectActions';\nimport {\n  LOAD_PROJECTS_REQUEST,\n  LOAD_PROJECTS_SUCCESS,\n  LOAD_PROJECTS_FAILURE\n} from '../projectTypes';\nimport { projectAPI } from '../../projectAPI';\nimport { MOCK_PROJECTS } from '../../MockProjects';\njest.mock('../../projectAPI');\n\nconst middlewares = [ReduxThunk];\nconst mockStoreCreator = configureMockStore(middlewares);\n\ndescribe('Project Actions', () => {\n  let store: any;\n\n  beforeEach(() => {\n    store = mockStoreCreator(initialAppState);\n  });\n\n\n+  test('should load projects successfully', () => {\n+    const expectedActions = [\n+      { type: LOAD_PROJECTS_REQUEST },\n+      {\n+        type: LOAD_PROJECTS_SUCCESS,\n+        payload: { projects: MOCK_PROJECTS, page: 1 }\n+      }\n+    ];\n+\n+    return store.dispatch(loadProjects(1)).then(() => {\n+      const actions = store.getActions();\n+      expect(actions).toEqual(expectedActions);\n+    });\n+  });\n\n});\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"All tests including the ",(0,o.kt)("inlineCode",{parentName:"p"},"'should load projects successfully'")," should pass."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"PASS  src/projects/state/__tests__/projectActions-test.ts\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Test that an error is returned when loading projects fails."))),(0,o.kt)("h4",{id:"srcprojectsstate__tests__projectactions-testts-2"},(0,o.kt)("inlineCode",{parentName:"h4"},"src/projects/state/__tests__/projectActions-test.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"import configureMockStore from 'redux-mock-store';\nimport ReduxThunk from 'redux-thunk';\nimport { initialAppState } from '../../../state';\nimport { loadProjects } from '../projectActions';\nimport {\n  LOAD_PROJECTS_REQUEST,\n  LOAD_PROJECTS_SUCCESS,\n  LOAD_PROJECTS_FAILURE\n} from '../projectTypes';\nimport { projectAPI } from '../../projectAPI';\nimport { MOCK_PROJECTS } from '../../MockProjects';\njest.mock('../../projectAPI');\n\nconst middlewares = [ReduxThunk];\nconst mockStoreCreator = configureMockStore(middlewares);\n\ndescribe('Project Actions', () => {\n  let store: any;\n\n  beforeEach(() => {\n    store = mockStoreCreator(initialAppState);\n  });\n\n  ...\n\n+    test('should return error', () => {\n+      projectAPI.get = jest\n+        .fn(\n+          // leave this commented initially\n+          // projectAPI.get\n+        )\n+        .mockImplementationOnce(() => {\n+          return Promise.reject('failed');\n+        });\n+\n+      const expectedActions = [\n+        { type: LOAD_PROJECTS_REQUEST },\n+        {\n+          type: LOAD_PROJECTS_FAILURE,\n+          payload: 'failed'\n+        }\n+      ];\n+\n+      return store.dispatch(loadProjects(1)).then(() => {\n+        const actions = store.getActions();\n+        expect(actions).toEqual(expectedActions);\n+      });\n+    });\n\n});\n\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The new test should pass."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"}," PASS  src/projects/state/__tests__/projectActions-test.ts\n")))),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"-you-have-completed-lab-7"},"\u2714"," You have completed Lab 7"))}d.isMDXComponent=!0}}]);