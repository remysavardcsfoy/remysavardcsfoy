"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[4548],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),p=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return o.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(h,i(i({ref:t},l),{},{components:n})):o.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9299:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const r={title:"React Redux",sidebar_label:"React Redux",slug:"/react-redux"},i=void 0,s={unversionedId:"ReactRedux",id:"ReactRedux",title:"React Redux",description:"Overview",source:"@site/docs/22-ReactRedux.md",sourceDirName:".",slug:"/react-redux",permalink:"/docs/react-redux",draft:!1,tags:[],version:"current",sidebarPosition:22,frontMatter:{title:"React Redux",sidebar_label:"React Redux",slug:"/react-redux"}},c={},p=[{value:"Overview",id:"overview",level:2},{value:"React bindings for Redux",id:"react-bindings-for-redux",level:3},{value:"<code>connect</code> is used in Class Components",id:"connect-is-used-in-class-components",level:3},{value:"<code>useSelector</code> and <code>useDispatch</code> Hooks are used in Function Components",id:"useselector-and-usedispatch-hooks-are-used-in-function-components",level:3},{value:"<code>Provider</code> gets you access to the <code>Store</code>",id:"provider-gets-you-access-to-the-store",level:3},{value:"Hooks provided by the React Redux library : <code>useSelector</code> and <code>useDispatch</code>",id:"hooks-provided-by-the-react-redux-library--useselector-and-usedispatch",level:2},{value:"<code>useSelector</code>",id:"useselector",level:3},{value:"<code>useDispatch</code>",id:"usedispatch",level:3},{value:"Example",id:"example",level:3},{value:"The <code>connect</code> function",id:"the-connect-function",level:2},{value:"What it Does",id:"what-it-does",level:3},{value:"Using",id:"using",level:3},{value:"Example",id:"example-1",level:3},{value:"Writing <code>mapState</code> Functions",id:"writing-mapstate-functions",level:3},{value:"Writing <code>mapDispatch</code> Functions",id:"writing-mapdispatch-functions",level:3},{value:"Tips",id:"tips",level:3},{value:"Provider",id:"provider",level:2},{value:"Inside React Redux (optional)",id:"inside-react-redux-optional",level:2},{value:"Inside <code>connect</code>",id:"inside-connect",level:3},{value:"Demo of How <code>connect</code> Works",id:"demo-of-how-connect-works",level:3},{value:"Final Code",id:"final-code",level:3},{value:"Inside <code>Provider</code>",id:"inside-provider",level:3},{value:"Reference",id:"reference",level:2}],l={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("h3",{id:"react-bindings-for-redux"},"React bindings for Redux"),(0,a.kt)("p",null,"Redux can be used with any UI layer (such as Angular, Vue, or plain JS), but is most commonly used with React."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"React-Redux")," provides bindings between React and Redux."),(0,a.kt)("h3",{id:"connect-is-used-in-class-components"},(0,a.kt)("inlineCode",{parentName:"h3"},"connect")," is used in Class Components"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"connect")," function generates wrapper ",(0,a.kt)("strong",{parentName:"p"},'"container"')," components that subscribe to the store, so you don't have to write store subscription code for every component that needs to talk to the store."),(0,a.kt)("p",null,"Any component in your application can be wrapped with ",(0,a.kt)("inlineCode",{parentName:"p"},"connect"),' and "connected" to the store. Connecting more components is usually better for performance.'),(0,a.kt)("h3",{id:"useselector-and-usedispatch-hooks-are-used-in-function-components"},(0,a.kt)("inlineCode",{parentName:"h3"},"useSelector")," and ",(0,a.kt)("inlineCode",{parentName:"h3"},"useDispatch")," Hooks are used in Function Components"),(0,a.kt)("p",null,"These hooks provide access to the data in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Store")," and the ability to dispatch actions to the ",(0,a.kt)("inlineCode",{parentName:"p"},"Store")," to change the data."),(0,a.kt)("h3",{id:"provider-gets-you-access-to-the-store"},(0,a.kt)("inlineCode",{parentName:"h3"},"Provider")," gets you access to the ",(0,a.kt)("inlineCode",{parentName:"h3"},"Store")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Provider")," gets you access to the store from anywhere in the component hierarchy."),(0,a.kt)("p",null,"Putting a ",(0,a.kt)("inlineCode",{parentName:"p"},"<Provider>")," component around your root component makes the store accessible to all connected components."),(0,a.kt)("h2",{id:"hooks-provided-by-the-react-redux-library--useselector-and-usedispatch"},"Hooks provided by the React Redux library : ",(0,a.kt)("inlineCode",{parentName:"h2"},"useSelector")," and ",(0,a.kt)("inlineCode",{parentName:"h2"},"useDispatch")),(0,a.kt)("h3",{id:"useselector"},(0,a.kt)("inlineCode",{parentName:"h3"},"useSelector")),(0,a.kt)("p",null,"Allows you to ",(0,a.kt)("inlineCode",{parentName:"p"},"select")," (think SQL) slices of state from the Redux ",(0,a.kt)("inlineCode",{parentName:"p"},"Store"),"."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useState")," manages Local Component State"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useSelector")," manages Redux Store State")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"useSelector")," hook gets state (data) directly from the Redux ",(0,a.kt)("inlineCode",{parentName:"p"},"Store")," so you there is no need to pass the state from the Redux store in as a ",(0,a.kt)("inlineCode",{parentName:"p"},"prop")," to the component."),(0,a.kt)("p",null,"Serves a similar purpose to ",(0,a.kt)("inlineCode",{parentName:"p"},"mapStateToProps")," when using class-based components and ",(0,a.kt)("inlineCode",{parentName:"p"},"connect"),"."),(0,a.kt)("h3",{id:"usedispatch"},(0,a.kt)("inlineCode",{parentName:"h3"},"useDispatch")),(0,a.kt)("p",null,"Gives you a reference to the dispatch function so you can dispatch actions and change the data (",(0,a.kt)("inlineCode",{parentName:"p"},"state"),") in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Store"),"."),(0,a.kt)("h3",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"//action types\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nfunction increment() {\n  //action creator\n  return { type: INCREMENT }; //action\n}\nfunction decrement() {\n  return { type: DECREMENT };\n}\n\n//reducer\nfunction reducer(state = 0, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n}\n\nvar store = Redux.createStore(reducer, enableDevTools());\n\nfunction enableDevTools() {\n  return (\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  );\n}\n\nconst { Provider, useSelector, useDispatch } = ReactRedux;\n\nfunction Result() {\n  const count = useSelector((state) => state);\n  return (\n    <React.Fragment>\n      <div>Count: {count}</div>\n    </React.Fragment>\n  );\n}\n\nfunction Actions() {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <button onClick={() => dispatch(increment())}>+</button>\n      <button onClick={() => dispatch(decrement())}>-</button>\n    </>\n  );\n}\n\nfunction CounterPage() {\n  return (\n    <>\n      <Actions />\n      <Result />\n    </>\n  );\n}\n\nfunction App() {\n  return <CounterPage />;\n}\n\nconst element = (\n  <div>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </div>\n);\n\nconst rootElement = document.getElementById('root');\nReactDOM.createRoot(rootElement).render(element);\n")),(0,a.kt)("h2",{id:"the-connect-function"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"connect")," function"),(0,a.kt)("h3",{id:"what-it-does"},"What it Does"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Automatically handles subscribing to the store, and helps dispatch actions"),(0,a.kt)("li",{parentName:"ul"},"Performance optimizations - automatically implements shouldComponentUpdate, and only re-renders your component when the data it needs changes"),(0,a.kt)("li",{parentName:"ul"},'Separates "subscribing to the store" from "what store am I subscribing to, and where did it come from?"'),(0,a.kt)("li",{parentName:"ul"},'Helps keep your React components "unaware" of Redux')),(0,a.kt)("h3",{id:"using"},"Using"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"connect")," function takes two arguments, both optional:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"mapStateToProps"),": called every time the store state changes. It receives the entire store state, and should return an object of data this component needs.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"mapStateToProps")," could have been named ",(0,a.kt)("inlineCode",{parentName:"p"},"mapStoreStateToProps")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"mapReduxStateToProps")," because people confuse React's local component state and Redux's state held in the store. ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/reduxjs/react-redux/issues/466"},"See this issue for more information"),".")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"mapDispatchToProps"),": called once on component creation. It receives the dispatch method, and should return an object full of functions that use dispatch.\nFor both functions, each field in the returned object becomes a prop for the wrapped component.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"connect")," returns a new function that accepts the component to wrap, and that function returns the wrapper component."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { connect } from 'react-redux';\nimport { increment } from './counterActions';\n\nfunction mapStateToProps(state) {\n  return {\n    // The \"counter\" field in this object becomes props.counter\n    counter: state.counter,\n  };\n}\n\nfunction mapDispatchToProps(dispatch, ownProps) {\n  return {\n    // The \"increment\" field in this object becomes props.increment\n    increment: () => dispatch(increment()),\n  };\n}\n\nconst Counter = (props) => (\n  <div>\n    <div>Counter value: {props.counter}</div>,\n    <button onClick={props.increment}>Increment</button>\n  </div>\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\n// Expanded:\n// const generateWrapperComponent = connect(mapState, mapDispatch);\n// const ConnectedCounter = generateWrapperComponent(Counter);\n")),(0,a.kt)("h3",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nfunction increment() {\n  return { type: INCREMENT };\n}\nfunction decrement() {\n  return { type: DECREMENT };\n}\n\nfunction reducer(state = 5, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n}\n\nvar store = Redux.createStore(reducer);\n\n// function enableDevTools() {\n//   return (\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n//   );\n// }\n// var store = Redux.createStore(reducer, enableDevTools());\n\nfunction Counter(props) {\n  return (\n    <React.Fragment>\n      <div>Count: {props.count}</div>\n      <button onClick={props.increment}>+</button>\n      <button onClick={props.decrement}>-</button>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    count: state,\n  };\n};\n\nconst mapDispatchToProps = { increment, decrement };\n\nconst WrappedCounter = ReactRedux.connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter);\n\nconst element = (\n  <div>\n    <ReactRedux.Provider store={store}>\n      <WrappedCounter />\n    </ReactRedux.Provider>\n  </div>\n);\n\nconst rootElement = document.getElementById('root');\nReactDOM.createRoot(rootElement).render(element);\n")),(0,a.kt)("h3",{id:"writing-mapstate-functions"},"Writing ",(0,a.kt)("inlineCode",{parentName:"h3"},"mapState")," Functions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"connect")," will re-run your mapState function every time the store state changes",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"does shallow equality comparison between the last and current result objects"),(0,a.kt)("li",{parentName:"ul"},"re-renders your component if any fields are === different than the last result"))),(0,a.kt)("li",{parentName:"ul"},"if function passes two parameters:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"receives wrapper component's props as the second argument"),(0,a.kt)("li",{parentName:"ul"},"called whenever the props passed to the wrapper component change (in addition to when store state changes)"))),(0,a.kt)("li",{parentName:"ul"},"a mapState function should be pure",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"no side effects"),(0,a.kt)("li",{parentName:"ul"},"just state ( + wrapper props) in"),(0,a.kt)("li",{parentName:"ul"},"new component props out"),(0,a.kt)("li",{parentName:"ul"},"similar to reducer")))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'// Also commonly known as "mapState" for short\n// the state parameter is connect calling store.getState() and returning the result as state\nfunction mapStateToProps(state) {\n  return {\n    counter: state.counter,\n  };\n}\n\n// Same thing, just with lots of ES6 shorthand\nconst mapState = ({ counter }) => ({ counter });\n\n// If declared with two arguments, will be called whenever\n// the state changes _and_ when incoming props change\nconst mapState = (state, ownProps) => ({\n  todo: state.todos[ownProps.todoIndex],\n});\n\n// can contain whatever logic and data preparation\n// steps you need, not just "return state.whatever"\nconst mapState = (state) => {\n  const { basicData, otherItem } = state;\n  const transformedData = transformStuff(basicData);\n  const filteredData = filterStuff(transformedData);\n\n  return {\n    data: filteredData,\n    otherItem,\n  };\n};\n')),(0,a.kt)("h3",{id:"writing-mapdispatch-functions"},"Writing ",(0,a.kt)("inlineCode",{parentName:"h3"},"mapDispatch")," Functions"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"By default, connect gives your components ",(0,a.kt)("inlineCode",{parentName:"li"},"props.dispatch"),"."),(0,a.kt)("li",{parentName:"ul"},'If you want to "bind" action creators instead, you can provide a mapDispatch function as the second argument to connect. It gets dispatch as an argument, and you can return functions that will dispatch automatically when called.'),(0,a.kt)("li",{parentName:"ul"},"Declaring mapDispatch with two arguments works the same way as mapState - will be given ownProps, and re-run when they change"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Better choice"),': pass an object full of action creators as the second argument to connect (the "object shorthand")')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'/ Also commonly known as "mapDispatch" for short\nfunction mapDispatchToProps(dispatch, ownProps) {\n    return {\n        increment : () => dispatch(increment()),\n        decrement : () => dispatch({type : "DECREMENT"}),\n        add : (amount) => dispatch(add(amount)),\n    };\n}\n\nexport default connect(mapState, mapDispatchToProps)(MyComponent);\n\n// If declared with two arguments, will be called whenever\n// the state changes _and_ when incoming props change\nconst mapDispatch = (dispatch, ownProps) => ({\n    add : () => dispatch(add(ownProps.amount))\n});\n\n// can use bindActionCreators inside\nconst mapDispatch = (dispatch) => {\n    return bindActionCreators({increment, decrement}, dispatch);\n}\n\n// TIP: Don\'t write a separate mapDispatch function.\n// Use the "object shorthand" instead! They\'re automatically bound.\nconst actions = {increment, decrement};\nexport default connect(mapState, actions)(MyComponent);\n')),(0,a.kt)("h3",{id:"tips"},"Tips"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You can connect as many of your app's components as you want, not just the root component.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"connecting more components is usually better for performance"))),(0,a.kt)("li",{parentName:"ul"},"Connect components when",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"they need to access store state or dispatch actions"),(0,a.kt)("li",{parentName:"ul"},"where passing props down multiple levels would be a pain"))),(0,a.kt)("li",{parentName:"ul"},"Only declare your map","*"," functions with two arguments if you really need props"),(0,a.kt)("li",{parentName:"ul"},"Both map","*"," functions are optional",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"if you only need data, use connect(mapState)(MyComponent)."),(0,a.kt)("li",{parentName:"ul"},"if you only need to dispatch, use connect(null, mapDispatch)(MyComponent)"))),(0,a.kt)("li",{parentName:"ul"},"In general, don't write an actual ",(0,a.kt)("inlineCode",{parentName:"li"},"mapDispatch")," function yourself",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},'use the "object shorthand" form with action creators instead!')))),(0,a.kt)("h2",{id:"provider"},"Provider"),(0,a.kt)("p",null,"Wrapping your root application component in ",(0,a.kt)("inlineCode",{parentName:"p"},"<Provider>")," and passing it the store reference makes that store available to all connected components in the component tree."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store';\n\n// App may be connected itself, and have connected\n// components deep inside its tree\nimport App from './App';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  // Wrap your top-level component in <Provider>,\n  // and pass in the store reference\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Why is the Provider designed this way?")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Manually importing the ",(0,a.kt)("inlineCode",{parentName:"li"},"store")," ties your components to that specific store instance, making it harder to test them"),(0,a.kt)("li",{parentName:"ul"},"React-Redux's ",(0,a.kt)("inlineCode",{parentName:"li"},"<Provider>")," acts as a lightweight dependency injection approach, which lets you reuse Redux-connected components and test them with a fake store if needed")),(0,a.kt)("h2",{id:"inside-react-redux-optional"},"Inside React Redux (optional)"),(0,a.kt)("h3",{id:"inside-connect"},"Inside ",(0,a.kt)("inlineCode",{parentName:"h3"},"connect")),(0,a.kt)("p",null,"How does connect work internally or how would you manually create a container component (connected, wrapped)?"),(0,a.kt)("p",null,"Using Redux with any UI layer requires the same consistent set of steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a Redux store")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Subscribe to updates")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Inside the subscription callback:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Get the current store state"),(0,a.kt)("li",{parentName:"ul"},"Extract the data needed by this piece of UI"),(0,a.kt)("li",{parentName:"ul"},"Update the UI with the data"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If necessary, render the UI with initial state")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Respond to UI inputs by dispatching Redux actions"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// 1) Create a store\nconst store = createStore(counter);\n\n// 2) Subscribe to store updates\nstore.subscribe(render);\n\nconst valueEl = document.getElementById('value');\n\n// 3. When the subscription callback runs:\nfunction render() {\n  // 3.1) Get the current store state\n  const state = store.getState();\n\n  // 3.2) Extract the data you want\n  const newValue = state.toString();\n\n  // 3.3) Update the UI with the new value\n  valueEl.innerHTML = newValue;\n}\n\n// 4) Display the UI with the initial store state\nrender();\n\n// 5) Dispatch actions based on UI inputs\ndocument.getElementById('increment').addEventListener('click', () => {\n  store.dispatch({ type: 'INCREMENT' });\n});\n")),(0,a.kt)("h3",{id:"demo-of-how-connect-works"},"Demo of How ",(0,a.kt)("inlineCode",{parentName:"h3"},"connect")," Works"),(0,a.kt)("p",null,"In this demo we are going to:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Use the redux demo code from the previous concept chapter on Redux shown below:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"commenting out the last lines that manually dispatch actions (because there is no UI yet)")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"//action types\nconst INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\n//action creators\nfunction increment() {\n  return { type: INCREMENT };\n}\nfunction decrement() {\n  return { type: DECREMENT };\n}\n\n//reducer\nfunction reducer(state = 0, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n}\n\n//store\nvar store = Redux.createStore(reducer);\n\n// store.subscribe(logState);\n\n// store.dispatch({ type: '' });\n// store.dispatch(increment());\n// store.dispatch(increment());\n// store.dispatch(decrement());\n// store.dispatch(decrement());\n// store.dispatch(decrement());\n// store.dispatch(decrement());\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add a UI by creating components including manually creating the container component."))),(0,a.kt)("p",null,"Add this code right below the last line in the previous step."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function Counter(props) {\n  return (\n    <React.Fragment>\n      <div>Count: {props.count}</div>\n      <button onClick={props.increment}>+</button>\n      <button onClick={props.decrement}>-</button>\n    </React.Fragment>\n  );\n}\n\nclass WrappedCounterManual extends React.Component {\n  state = this.getCurrentStateFromStore();\n\n  getCurrentStateFromStore() {\n    return {\n      count: store.getState(),\n    };\n  }\n\n  updateStateFromStore = () => {\n    const currentState = this.getCurrentStateFromStore();\n\n    if (this.state !== currentState) {\n      this.setState(currentState);\n    }\n  };\n\n  componentDidMount() {\n    this.unsubscribeStore = store.subscribe(this.updateStateFromStore);\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeStore();\n  }\n\n  render() {\n    return (\n      <Counter\n        count={this.state.count}\n        increment={() => store.dispatch(increment())}\n        decrement={() => store.dispatch(decrement())}\n      />\n    );\n  }\n}\n\nconst element = (\n  <div>\n    <h3>Container Manually Implemented </h3>\n    <WrappedCounterManual />\n  </div>\n);\n\nconst rootElement = document.getElementById('root');\nReactDOM.createRoot(rootElement).render(element);\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Open the application in a browser: http://localhost:5000/")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Click the ",(0,a.kt)("inlineCode",{parentName:"p"},"+")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"-")," buttons to verify it is working")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Comment out the manually created component"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"//   class WrappedCounterManual extends React.Component {\n//     state = this.getCurrentStateFromStore();\n\n//     getCurrentStateFromStore() {\n//       return {\n//         count: store.getState()\n//       };\n//     }\n\n//     updateStateFromStore = () => {\n//       const currentState = this.getCurrentStateFromStore();\n\n//       if (this.state !== currentState) {\n//         this.setState(currentState);\n//       }\n//     };\n\n//     componentDidMount() {\n//       this.unsubscribeStore = store.subscribe(this.updateStateFromStore);\n//     }\n\n//     componentWillUnmount() {\n//       this.unsubscribeStore();\n//     }\n\n//     render() {\n//       return (\n//         <Counter\n//           count={this.state.count}\n//           increment={() => store.dispatch(increment())}\n//           decrement={() => store.dispatch(decrement())}\n//         />\n//       );\n//     }\n//   }\n\n//   const element = (\n//     <div>\n//       <h3>Container Manually Implemented </h3>\n//       <WrappedCounterManual />\n//     </div>\n//   );\n\n// const rootElement = document.getElementById('root');\n//ReactDOM.createRoot(rootElement).render(element);\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"connect")," to automatically create the container component."),(0,a.kt)("p",{parentName:"li"},"Add this code to the bottom of the file."),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const mapStateToProps = (state) => {\n  return {\n    count: state,\n  };\n};\n\nconst mapDispatchToProps = { increment, decrement };\n\nconst WrappedCounter = ReactRedux.connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter);\n\nconst element = (\n  <div>\n    <h3>Container Created using React Redux (connect)</h3>\n    <ReactRedux.Provider store={store}>\n      <WrappedCounter />\n    </ReactRedux.Provider>\n  </div>\n);\n\nconst rootElement = document.getElementById('root');\nReactDOM.createRoot(rootElement).render(element);\n")))),(0,a.kt)("h3",{id:"final-code"},"Final Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const INCREMENT = 'INCREMENT';\nconst DECREMENT = 'DECREMENT';\n\nfunction increment() {\n  return { type: INCREMENT };\n}\nfunction decrement() {\n  return { type: DECREMENT };\n}\n\nfunction reducer(state = 5, action) {\n  switch (action.type) {\n    case INCREMENT:\n      return state + 1;\n    case DECREMENT:\n      return state - 1;\n    default:\n      return state;\n  }\n}\nvar store = Redux.createStore(reducer);\n\nfunction Counter(props) {\n  return (\n    <React.Fragment>\n      <div>Count: {props.count}</div>\n      <button onClick={props.increment}>+</button>\n      <button onClick={props.decrement}>-</button>\n    </React.Fragment>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    count: state,\n  };\n};\n\nconst mapDispatchToProps = { increment, decrement };\n\nconst WrappedCounter = ReactRedux.connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Counter);\n\n//manually\nclass WrappedCounterManual extends React.Component {\n  state = this.getCurrentStateFromStore();\n\n  getCurrentStateFromStore() {\n    return {\n      count: store.getState(),\n    };\n  }\n\n  updateStateFromStore = () => {\n    const currentState = this.getCurrentStateFromStore();\n\n    if (this.state !== currentState) {\n      this.setState(currentState);\n    }\n  };\n\n  componentDidMount() {\n    this.unsubscribeStore = store.subscribe(this.updateStateFromStore);\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeStore();\n  }\n\n  render() {\n    return (\n      <Counter\n        count={this.state.count}\n        increment={() => store.dispatch(increment())}\n        decrement={() => store.dispatch(decrement())}\n      />\n    );\n  }\n}\n\nconst element = (\n  <div>\n    <h3>Container Manually Implemented </h3>\n    <WrappedCounterManual />\n    <hr />\n    <h3>Container Created using React Redux (connect)</h3>\n    <ReactRedux.Provider store={store}>\n      <WrappedCounter />\n    </ReactRedux.Provider>\n  </div>\n);\n\nconst rootElement = document.getElementById('root');\nReactDOM.createRoot(rootElement).render(element);\n\n// var store = Redux.createStore(reducer, enableDevTools());\n\n// function enableDevTools() {\n//   return (\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n//   );\n// }\n\n// function logState() {\n//   console.log(store.getState().toString());\n// }\n\n// store.subscribe(logState);\n\n// store.dispatch({ type: '' });\n// store.dispatch({ type: 'INCREMENT' });\n// store.dispatch({ type: 'INCREMENT' });\n// store.dispatch({ type: 'DECREMENT' });\n")),(0,a.kt)("h3",{id:"inside-provider"},"Inside ",(0,a.kt)("inlineCode",{parentName:"h3"},"Provider")),(0,a.kt)("p",null,"How does the wrapped component get access to the store?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"Provider")," puts it in the React context.")),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://react-redux.js.org/introduction/why-use-react-redux"},"React Redux Documentation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://blog.isquaredsoftware.com/2018/11/react-redux-history-implementation/"},"React Redux Implementation History")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://blog.isquaredsoftware.com/presentations/workshops/redux-fundamentals/react-redux.html#/"},"Using React Redux")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://blog.logrocket.com/react-redux-connect-when-and-how-to-use-it-f2a1edab2013/"},"Understanding React Redux")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://react-redux.js.org/next/api/hooks"},"useSelector: connect as a React Hook")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/elastic/kibana/issues/14547"},"Using Redux Containers vs Only at a High Level"))))}d.isMDXComponent=!0}}]);