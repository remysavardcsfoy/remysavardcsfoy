"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[2607],{3905:(e,n,t)=>{t.d(n,{Zo:()=>i,kt:()=>h});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var u=o.createContext({}),s=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},i=function(e){var n=s(e.components);return o.createElement(u.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,i=l(e,["components","mdxType","originalType","parentName"]),p=s(t),m=r,h=p["".concat(u,".").concat(m)]||p[m]||d[m]||a;return t?o.createElement(h,c(c({ref:n},i),{},{components:t})):o.createElement(h,c({ref:n},i))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,c=new Array(a);c[0]=m;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:r,c[1]=l;for(var s=2;s<a;s++)c[s]=t[s];return o.createElement.apply(null,c)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1441:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=t(7462),r=(t(7294),t(3905));const a={id:"A13-Context",title:"Context",sidebar_label:"Context",slug:"/context"},c=void 0,l={unversionedId:"A13-Context",id:"A13-Context",title:"Context",description:"Definition",source:"@site/docs/A13-Context.md",sourceDirName:".",slug:"/context",permalink:"/docs/context",draft:!1,tags:[],version:"current",frontMatter:{id:"A13-Context",title:"Context",sidebar_label:"Context",slug:"/context"}},u={},s=[{value:"Definition",id:"definition",level:2},{value:"When to Use Context",id:"when-to-use-context",level:2},{value:"Function Component Example",id:"function-component-example",level:2},{value:"Passing Props",id:"passing-props",level:4},{value:"Using the Context API",id:"using-the-context-api",level:4},{value:"Class Component Example",id:"class-component-example",level:2},{value:"Passing Props",id:"passing-props-1",level:4},{value:"Using the Context API",id:"using-the-context-api-1",level:4},{value:"Reference",id:"reference",level:2}],i={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,o.Z)({},i,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Context is designed to share data that can be considered \u201cglobal\u201d for a tree of React components, such as the current authenticated user, theme, or preferred language.")),(0,r.kt)("h2",{id:"when-to-use-context"},"When to Use Context"),(0,r.kt)("p",null,"When props need to be shared with most of a tree of components."),(0,r.kt)("h2",{id:"function-component-example"},"Function Component Example"),(0,r.kt)("h4",{id:"passing-props"},"Passing Props"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const themes = {\n  light: {\n    foreground: "#000000",\n    background: "#eeeeee",\n  },\n  dark: {\n    foreground: "#ffffff",\n    background: "#222222",\n  },\n};\n\nfunction App() {\n  const [themeName, setThemeName] = React.useState("light");\n  const currentTheme = themes[themeName];\n  return (\n    <>\n      <select\n        onChange={(event) => setThemeName(event.target.value)}\n        value={themeName}\n      >\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n      </select>\n\n      <Toolbar theme={currentTheme} />\n    </>\n  );\n}\n\nfunction Toolbar({ theme }) {\n  return (\n    <div>\n      <ThemedButton theme={theme} />\n    </div>\n  );\n}\n\nfunction ThemedButton({ theme }) {\n  const { background, foreground } = theme;\n  return (\n    <button\n      style={{\n        backgroundColor: background,\n        color: foreground,\n      }}\n    >\n      Click Me\n    </button>\n  );\n}\n\nReactDOM.createRoot(document.getElementById("root")).render(<App />);\n')),(0,r.kt)("h4",{id:"using-the-context-api"},"Using the Context API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const themes = {\n  light: {\n    foreground: "#000000",\n    background: "#eeeeee",\n  },\n  dark: {\n    foreground: "#ffffff",\n    background: "#222222",\n  },\n};\n\nconst ThemeContext = React.createContext(themes.light);\n\nfunction App() {\n  const [themeName, setThemeName] = React.useState("light");\n  const currentTheme = themes[themeName];\n  return (\n    <>\n      <select\n        onChange={(event) => setThemeName(event.target.value)}\n        value={themeName}\n      >\n        <option value="light">Light</option>\n        <option value="dark">Dark</option>\n      </select>\n      <ThemeContext.Provider value={currentTheme}>\n        <Toolbar />\n      </ThemeContext.Provider>\n    </>\n  );\n}\n\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nfunction ThemedButton() {\n  const { background, foreground } = React.useContext(ThemeContext);\n  return (\n    <button\n      style={{\n        backgroundColor: background,\n        color: foreground,\n      }}\n    >\n      Click Me\n    </button>\n  );\n}\n\nReactDOM.createRoot(document.getElementById("root")).render(<App />);\n')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"class-component-example"},"Class Component Example"),(0,r.kt)("p",null,"In the example below, the theme is a prop to all components in the tree."),(0,r.kt)("h4",{id:"passing-props-1"},"Passing Props"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'const themes = {\n  light: {\n    foreground: "#000000",\n    background: "#eeeeee",\n  },\n  dark: {\n    foreground: "#ffffff",\n    background: "#222222",\n  },\n};\n\nclass App extends React.Component {\n  render() {\n    return <Toolbar theme={themes.light} />;\n  }\n}\n\nfunction Toolbar(props) {\n  // The Toolbar component must take an extra "theme" prop\n  // and pass it to the ThemedButton. This can become painful\n  // if every single button in the app needs to know the theme\n  // because it would have to be passed through all components.\n  return (\n    <div>\n      <ThemedButton theme={props.theme} />\n    </div>\n  );\n}\n\nclass ThemedButton extends React.Component {\n  render() {\n    const { background, foreground } = this.props.theme;\n\n    return (\n      <button\n        style={{\n          backgroundColor: background,\n          color: foreground,\n        }}\n      >\n        Click Me\n      </button>\n    );\n  }\n}\n\nReactDOM.createRoot(document.getElementById("root")).render(<App />);\n')),(0,r.kt)("h4",{id:"using-the-context-api-1"},"Using the Context API"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const themes = {\n  light: {\n    foreground: "#000000",\n    background: "#eeeeee",\n  },\n  dark: {\n    foreground: "#ffffff",\n    background: "#222222",\n  },\n};\n\n// Create a context for the current theme (with "light" as the default).\nconst ThemeContext = React.createContext(themes.light);\n\n// class App extends React.Component {\n//   render() {\n//     return <Toolbar theme={themes.light} />;\n//   }\n// }\n\nclass App extends React.Component {\n  render() {\n    return (\n      <ThemeContext.Provider value={themes.dark}>\n        <Toolbar />\n      </ThemeContext.Provider>\n    );\n  }\n}\n\n// function Toolbar(props) {\n//   return (\n//     <div>\n//       <ThemedButton theme={props.theme} />\n//     </div>\n//   );\n// }\n\nfunction Toolbar(props) {\n  return (\n    <div>\n      <ThemedButton />\n    </div>\n  );\n}\n\nclass ThemedButton extends React.Component {\n  static contextType = ThemeContext;\n  render() {\n    const { background, foreground } = this.context;\n\n    return (\n      <button\n        style={{\n          backgroundColor: background,\n          color: foreground,\n        }}\n      >\n        Click Me\n      </button>\n    );\n  }\n}\n// ThemedButton.contextType = ThemeContext;\n\nReactDOM.createRoot(document.getElementById("root")).render(<App />);\n')),(0,r.kt)("h2",{id:"reference"},"Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/context.html"},"Context: React Documentation"))))}d.isMDXComponent=!0}}]);