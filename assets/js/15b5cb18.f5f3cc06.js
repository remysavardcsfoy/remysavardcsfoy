"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[9152],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var r=i.createContext({}),c=function(e){var t=i.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(r.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,y=u["".concat(r,".").concat(m)]||u[m]||d[m]||o;return n?i.createElement(y,s(s({ref:t},p),{},{components:n})):i.createElement(y,s({ref:t},p))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=m;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4987:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const o={title:"Styling"},s=void 0,l={unversionedId:"gatsby/concepts/Styling",id:"gatsby/concepts/Styling",title:"Styling",description:"Global Styles",source:"@site/docs/gatsby/concepts/03-Styling.md",sourceDirName:"gatsby/concepts",slug:"/gatsby/concepts/Styling",permalink:"/docs/gatsby/concepts/Styling",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Styling"}},r={},c=[{value:"Global Styles",id:"global-styles",level:2},{value:"<code>srcstylesglobal.css</code>",id:"srcstylesglobalcss",level:4},{value:"<code>srccomponentslayout.js</code>",id:"srccomponentslayoutjs",level:4},{value:"Component Styles (Scoped)",id:"component-styles-scoped",level:2},{value:"CSS-in-JS",id:"css-in-js",level:2},{value:"Emotion",id:"emotion",level:2},{value:"<code>gatsby-config.js</code>",id:"gatsby-configjs",level:4},{value:"<code>srccomponentsheader.js</code>",id:"srccomponentsheaderjs",level:4},{value:"Utility-First CSS",id:"utility-first-css",level:2},{value:"Utility-First Example",id:"utility-first-example",level:2},{value:"Using a traditional approach where custom designs require custom CSS",id:"using-a-traditional-approach-where-custom-designs-require-custom-css",level:3},{value:"Using utility classes to build custom designs without writing CSS",id:"using-utility-classes-to-build-custom-designs-without-writing-css",level:3},{value:"Utility-First Benefits",id:"utility-first-benefits",level:2},{value:"Why not just use inline styles?",id:"why-not-just-use-inline-styles",level:2},{value:"Tailwind",id:"tailwind",level:2},{value:"Reference",id:"reference",level:2},{value:"Review",id:"review",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"global-styles"},"Global Styles"),(0,a.kt)("h4",{id:"srcstylesglobalcss"},(0,a.kt)("inlineCode",{parentName:"h4"},"src\\styles\\global.css")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"You will need to create the styles directory.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"body {\n  background-color: #f3f4f6;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto,\n    Oxygen-Sans, Ubuntu, Cantarell, 'Helvetica Neue', sans-serif;\n}\n")),(0,a.kt)("h4",{id:"srccomponentslayoutjs"},(0,a.kt)("inlineCode",{parentName:"h4"},"src\\components\\layout.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'import React from "react"\nimport Footer from "./footer"\nimport Header from "./header"\n+ import "../styles/global.css"\n\nexport default function Layout({ children }) {\nreturn (\n    <div>\n    <Header />\n    {children}\n    <Footer />\n    </div>\n)\n}\n')),(0,a.kt)("h2",{id:"component-styles-scoped"},"Component Styles (Scoped)"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Create a CSS Module for the layout component."),(0,a.kt)("h4",{parentName:"li",id:"srccomponentslayoutmodulecss"},(0,a.kt)("inlineCode",{parentName:"h4"},"src\\components\\layout.module.css")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-css"},".container {\n  margin: 0 auto;\n  max-width: 1920px;\n  padding: 10px;\n}\n"))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Import your css module into the component and apply the container class."),(0,a.kt)("h4",{parentName:"li",id:"srccomponentslayoutjs-1"},(0,a.kt)("inlineCode",{parentName:"h4"},"src\\components\\layout.js")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'import React from "react"\nimport Footer from "./footer"\nimport Header from "./header"\n+ import * as styles from "./layout.module.css"\n\nexport default function Layout({ children }) {\nreturn (\n-    <div>\n+    <div className={styles.container}>\n    <Header />\n    {children}\n    <Footer />\n    </div>\n)\n}\n')))),(0,a.kt)("h2",{id:"css-in-js"},"CSS-in-JS"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"CSS-in-JS")," is a styling technique where JavaScript is used to style components. When this JavaScript is parsed, CSS is generated (usually as a ",(0,a.kt)("inlineCode",{parentName:"p"},"<style>")," element) and attached into the DOM. It allows developers to abstract CSS to the component level itself, using JavaScript to describe styles in a declarative and maintainable way."),(0,a.kt)("p",null,"There are multiple implementations of this concept in the form of libraries such as:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Emotion")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Styled Components"))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more information on the adoption level and user satisfaction of these libraries see the ",(0,a.kt)("a",{parentName:"p",href:"https://2020.stateofcss.com/en-US/technologies/css-in-js/"},"State of CSS Survey")," and this ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmtrends.com/styled-components-vs-emotion-vs-glamorous-vs-@emotion/core-vs-@emotion/react-vs-@emotion/css"},"npm Trends Chart"),".")),(0,a.kt)("h2",{id:"emotion"},"Emotion"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"npm install gatsby-plugin-emotion @emotion/react @emotion/styled\n")),(0,a.kt)("h4",{id:"gatsby-configjs"},(0,a.kt)("inlineCode",{parentName:"h4"},"gatsby-config.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"module.exports = {\n  plugins: [`gatsby-plugin-emotion`],\n};\n")),(0,a.kt)("h4",{id:"srccomponentsheaderjs"},(0,a.kt)("inlineCode",{parentName:"h4"},"src\\components\\header.js")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import { Link } from 'gatsby';\nimport React from 'react';\nimport styled from '@emotion/styled';\n\nconst NavLink = styled(Link)`\n  margin-left: 5px;\n  margin-right: 5px;\n  padding: 10px;\n  color: #4b5563;\n  text-decoration: none;\n  font-size: 1.25rem;\n  &:hover {\n    color: #1f2937;\n    border: 1px solid #1f2937;\n    padding: 10px;\n  }\n`;\n\nconst StyledHeader = styled.header`\n  border-bottom: 1px solid #4b5563;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport default function Header() {\n  return (\n    <StyledHeader>\n      <nav>\n        <NavLink to=\"/\">Home</NavLink>\n        <NavLink to=\"/about\">About</NavLink>\n      </nav>\n    </StyledHeader>\n  );\n}\n")),(0,a.kt)("h2",{id:"utility-first-css"},"Utility-First CSS"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Building complex components from a constrained set of primitive utilities")),(0,a.kt)("h2",{id:"utility-first-example"},"Utility-First Example"),(0,a.kt)("p",null,"Traditionally, whenever you need to style something on the web, you write CSS."),(0,a.kt)("h3",{id:"using-a-traditional-approach-where-custom-designs-require-custom-css"},"Using a traditional approach where custom designs require custom CSS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<div class="chat-notification">\n  <div class="chat-notification-logo-wrapper">\n    <img\n      class="chat-notification-logo"\n      src="/img/logo.svg"\n      alt="ChitChat Logo"\n    />\n  </div>\n  <div class="chat-notification-content">\n    <h4 class="chat-notification-title">ChitChat</h4>\n    <p class="chat-notification-message">You have a new message!</p>\n  </div>\n</div>\n\n<style>\n  .chat-notification {\n    display: flex;\n    max-width: 24rem;\n    margin: 0 auto;\n    padding: 1.5rem;\n    border-radius: 0.5rem;\n    background-color: #fff;\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n  .chat-notification-logo-wrapper {\n    flex-shrink: 0;\n  }\n  .chat-notification-logo {\n    height: 3rem;\n    width: 3rem;\n  }\n  .chat-notification-content {\n    margin-left: 1.5rem;\n    padding-top: 0.25rem;\n  }\n  .chat-notification-title {\n    color: #1a202c;\n    font-size: 1.25rem;\n    line-height: 1.25;\n  }\n  .chat-notification-message {\n    color: #718096;\n    font-size: 1rem;\n    line-height: 1.5;\n  }\n</style>\n')),(0,a.kt)("p",null,"With utility classes (Tailwind), you style elements by applying pre-existing classes directly in your HTML."),(0,a.kt)("h3",{id:"using-utility-classes-to-build-custom-designs-without-writing-css"},"Using utility classes to build custom designs without writing CSS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-html"},'<div\n  class="p-6 max-w-sm mx-auto bg-white rounded-xl shadow-md flex items-center space-x-4"\n>\n  <div class="flex-shrink-0">\n    <img class="h-12 w-12" src="/img/logo.svg" alt="ChitChat Logo" />\n  </div>\n  <div>\n    <div class="text-xl font-medium text-black">ChitChat</div>\n    <p class="text-gray-500">You have a new message!</p>\n  </div>\n</div>\n')),(0,a.kt)("h2",{id:"utility-first-benefits"},"Utility-First Benefits"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"You aren't wasting energy inventing class names"),(0,a.kt)("li",{parentName:"ul"},"Your CSS stops growing"),(0,a.kt)("li",{parentName:"ul"},"Making changes feels safer")),(0,a.kt)("h2",{id:"why-not-just-use-inline-styles"},"Why not just use inline styles?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Designing with constraints.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Using inline styles, every value is a magic number. With utilities, you're choosing styles from a predefined design system, which makes it much easier to build visually consistent UIs."))),(0,a.kt)("li",{parentName:"ul"},"Responsive design.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"You can't use media queries in inline styles, but you can use Tailwind's responsive utilities to build fully responsive interfaces easily."))),(0,a.kt)("li",{parentName:"ul"},"Hover, focus, and other states.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Inline styles can't target states like hover or focus, but Tailwind's state variants make it easy to style those states with utility classes.")))),(0,a.kt)("h2",{id:"tailwind"},"Tailwind"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a utility-first CSS framework"),(0,a.kt)("li",{parentName:"ul"},"for rapidly building custom user interfaces")),(0,a.kt)("h2",{id:"reference"},"Reference"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://tailwindcss.com/docs/utility-first"},"Utility-First Defined")),(0,a.kt)("h2",{id:"review"},"Review"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"How can you include global styles in a Gatsby site?"),(0,a.kt)("li",{parentName:"ol"},"What do you think about CSS-in-JS approaches to styling in Gatsby?"),(0,a.kt)("li",{parentName:"ol"},"What are some of the benefits with using a Utility-first CSS Framework like Tailwind?")))}d.isMDXComponent=!0}}]);