"use strict";(self.webpackChunkreact=self.webpackChunkreact||[]).push([[6998],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},s=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=l(n),u=r,k=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return n?a.createElement(k,p(p({ref:t},s),{},{components:n})):a.createElement(k,p({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,p=new Array(o);p[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[m]="string"==typeof e?e:r,p[1]=i;for(var l=2;l<o;l++)p[l]=n[l];return a.createElement.apply(null,p)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},705:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>p,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var a=n(7462),r=(n(7294),n(3905));const o={title:"Lab 15: Form Values to State"},p=void 0,i={unversionedId:"labs/ts/FormValuesToState",id:"labs/ts/FormValuesToState",title:"Lab 15: Form Values to State",description:"Objectives",source:"@site/docs/labs/ts/15-FormValuesToState.md",sourceDirName:"labs/ts",slug:"/labs/ts/FormValuesToState",permalink:"/docs/labs/ts/FormValuesToState",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"Lab 15: Form Values to State"}},c={},l=[{value:"Objectives",id:"objectives",level:2},{value:"Steps",id:"steps",level:2},{value:"Add form data to component state",id:"add-form-data-to-component-state",level:3},{value:"Make form fields controlled components",id:"make-form-fields-controlled-components",level:3},{value:"Handle submission of the form",id:"handle-submission-of-the-form",level:3},{value:"\u2714 You have completed Lab 15",id:"-you-have-completed-lab-15",level:3}],s={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"objectives"},"Objectives"),(0,r.kt)("ul",{className:"contains-task-list"},(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add form data to component state"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Make form fields controlled components"),(0,r.kt)("li",{parentName:"ul",className:"task-list-item"},(0,r.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Handle submission of the form")),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("h3",{id:"add-form-data-to-component-state"},"Add form data to component state"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Open")," the ",(0,r.kt)("strong",{parentName:"p"},"file")," ",(0,r.kt)("inlineCode",{parentName:"p"},"src\\projects\\ProjectForm.tsx"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the ",(0,r.kt)("inlineCode",{parentName:"p"},"ProjectFormProps")," ",(0,r.kt)("strong",{parentName:"p"},"interface")," add the ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," prop to it."),(0,r.kt)("h4",{parentName:"li",id:"srcprojectsprojectformtsx"},(0,r.kt)("inlineCode",{parentName:"h4"},"src\\projects\\ProjectForm.tsx")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"interface ProjectFormProps {\n+ project: Project;\n  onSave: (project: Project) => void;\n  onCancel: () => void;\n}\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Destructure")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," prop in the function component signature and ",(0,r.kt)("strong",{parentName:"p"},"rename")," it ",(0,r.kt)("inlineCode",{parentName:"p"},"initialProject")," so that we can name our state variable ",(0,r.kt)("inlineCode",{parentName:"p"},"project"),". Next, ",(0,r.kt)("strong",{parentName:"p"},"create")," a ",(0,r.kt)("em",{parentName:"p"},"state variable")," ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," using the ",(0,r.kt)("inlineCode",{parentName:"p"},"useState")," hook."),(0,r.kt)("h4",{parentName:"li",id:"srcprojectsprojectformtsx-1"},(0,r.kt)("inlineCode",{parentName:"h4"},"src\\projects\\ProjectForm.tsx")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"- import React, { SyntheticEvent } from 'react';\n+ import React, { SyntheticEvent, useState } from 'react';\n\nfunction ProjectForm({\n+ project: initialProject,\n  onSave,\n  onCancel,\n}: ProjectFormProps) {\n+  const [project, setProject] = useState(initialProject);\n\nconst handleSubmit = (event: SyntheticEvent) => {\n   event.preventDefault();\n   onSave(new Project({ name: 'Updated Project' }));\n};\n\n...\n}\n")))),(0,r.kt)("h3",{id:"make-form-fields-controlled-components"},"Make form fields controlled components"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Make")," all ",(0,r.kt)("inlineCode",{parentName:"p"},"<input />"),"s and ",(0,r.kt)("inlineCode",{parentName:"p"},"<textarea />"),"s ",(0,r.kt)("strong",{parentName:"p"},"controlled")," ",(0,r.kt)("strong",{parentName:"p"},"components")," by assigning their values to a ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," property on ",(0,r.kt)("inlineCode",{parentName:"p"},"state"),"."),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Write")," a ",(0,r.kt)("inlineCode",{parentName:"p"},"handleChange")," event handler and wire it up to ",(0,r.kt)("inlineCode",{parentName:"p"},"onChange")," event of all the form fields.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"The form field ",(0,r.kt)("strong",{parentName:"p"},"types")," that need to be handled include:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'<input type="text" />')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'<input type="number" />')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'<input type="checkbox" />')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<textarea />"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Alternatively, you could write a separate handler for each of the form field types and invoke them as appropriate but this can be tedious and more difficult to maintain.")))),(0,r.kt)("h4",{parentName:"li",id:"srcprojectsprojectformtsx-2"},(0,r.kt)("inlineCode",{parentName:"h4"},"src\\projects\\ProjectForm.tsx")))))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'...\nfunction ProjectForm({\n  project: initialProject,\n  onSave,\n  onCancel,\n}: ProjectFormProps) {\n  const [project, setProject] = useState(initialProject);\n  const handleSubmit = (event: SyntheticEvent) => {\n    event.preventDefault();\n    onSave(new Project({ name: \'Updated Project\' }));\n  };\n\n+  const handleChange = (event: any) => {\n+    const { type, name, value, checked } = event.target;\n+    // if input type is checkbox use checked\n+    // otherwise it\'s type is text, number etc. so use value\n+    let updatedValue = type === \'checkbox\' ? checked : value;\n+\n+    //if input type is number convert the updatedValue string to a +number\n+    if (type === \'number\') {\n+      updatedValue = Number(updatedValue);\n+    }\n+    const change = {\n+      [name]: updatedValue,\n+    };\n+\n+    let updatedProject: Project;\n+    // need to do functional update b/c\n+    // the new project state is based on the previous project state\n+    // so we can keep the project properties that aren\'t being edited +like project.id\n+    // the spread operator (...) is used to\n+    // spread the previous project properties and the new change\n+    setProject((p) => {\n+      updatedProject = new Project({ ...p, ...change });\n+      return updatedProject;\n+    });\n+  };\n\n  return (\n    <form className="input-group vertical" onSubmit={handleSubmit}>\n      <label htmlFor="name">Project Name</label>\n      <input\n        type="text"\n        name="name"\n        placeholder="enter name"\n+       value={project.name}\n+       onChange={handleChange}\n      />\n      <label htmlFor="description">Project Description</label>\n      <textarea\n        name="description"\n        placeholder="enter description"\n+       value={project.description}\n+       onChange={handleChange}\n      />\n      <label htmlFor="budget">Project Budget</label>\n      <input\n        type="number"\n        name="budget"\n        placeholder="enter budget"\n+       value={project.budget}\n+       onChange={handleChange}\n      />\n      <label htmlFor="isActive">Active?</label>\n      <input\n        type="checkbox"\n        name="isActive"\n+       checked={project.isActive}\n+       onChange={handleChange}\n      />\n      <div className="input-group">\n        <button className="primary bordered medium">Save</button>\n        <span />\n        <button type="button" className="bordered medium" onClick={onCancel}>\n          cancel\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default ProjectForm;\n')),(0,r.kt)("h3",{id:"handle-submission-of-the-form"},"Handle submission of the form"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"handleSubmit"),", when calling the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSave")," ",(0,r.kt)("inlineCode",{parentName:"p"},"prop")," pass ",(0,r.kt)("inlineCode",{parentName:"p"},"state.project")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"new Project({ name: 'Updated Project' })"),"."),(0,r.kt)("h4",{parentName:"li",id:"srcprojectsprojectformtsx-3"},(0,r.kt)("inlineCode",{parentName:"h4"},"src\\projects\\ProjectForm.tsx")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"...\nfunction ProjectForm({\n  project: initialProject,\n  onSave,\n  onCancel,\n}: ProjectFormProps) {\n  const [project, setProject] = useState(initialProject);\n\n  const handleSubmit = (event: SyntheticEvent) => {\n    event.preventDefault();\n-   onSave(new Project({ name: 'Updated Project' }));\n+   onSave(project);\n  };\n  ...\n}\n\nexport default ProjectForm;\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"ProjectList")," ",(0,r.kt)("strong",{parentName:"p"},"set")," the ",(0,r.kt)("inlineCode",{parentName:"p"},"project")," ",(0,r.kt)("strong",{parentName:"p"},"prop")," into the ",(0,r.kt)("inlineCode",{parentName:"p"},"<ProjectForm />"),"."),(0,r.kt)("h4",{parentName:"li",id:"srcprojectsprojeclisttsx"},(0,r.kt)("inlineCode",{parentName:"h4"},"src\\projects\\ProjecList.tsx")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'...\nfunction ProjectList({ projects, onSave }: ProjectListProps) {\nconst [projectBeingEdited, setProjectBeingEdited] = useState({});\n\nconst handleEdit = (project: Project) => {\n   setProjectBeingEdited(project);\n};\n\nconst cancelEditing = () => {\n   setProjectBeingEdited({});\n};\n\nreturn (\n   <div className="row">\n      {projects.map((project) => (\n      <div key={project.id} className="cols-sm">\n         {project === projectBeingEdited ? (\n            <ProjectForm\n+              project={project}\n            onSave={onSave}\n            onCancel={cancelEditing}\n            />\n         ) : (\n            <ProjectCard project={project} onEdit={handleEdit} />\n         )}\n      </div>\n      ))}\n   </div>\n);\n}\n\nexport default ProjectList;\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"ProjectsPage update the project."),(0,r.kt)("h4",{parentName:"li",id:"srcprojectsprojectspagetsx"},(0,r.kt)("inlineCode",{parentName:"h4"},"src\\projects\\ProjectsPage.tsx")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"import React, { Fragment,\n+ useState } from 'react';\nimport { MOCK_PROJECTS } from './MockProjects';\nimport ProjectList from './ProjectList';\n+ import { Project } from './Project';\n\nfunction ProjectsPage() {\n+  const [projects, setProjects] = useState<Project[]>(MOCK_PROJECTS);\n\nconst saveProject = (project: Project) => {\n-   console.log('Saving project: ', project);\n+    let updatedProjects = projects.map((p: Project) => {\n+      return p.id === project.id ? project : p;\n+    });\n+    setProjects(updatedProjects);\n};\n\nreturn (\n   <Fragment>\n      <h1>Projects</h1>\n-      <ProjectList onSave={saveProject} projects={MOCK_PROJECTS} />\n+      <ProjectList onSave={saveProject} projects={projects} />\n   </Fragment>\n);\n}\n\nexport default ProjectsPage;\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Verify")," the application is working by following these ",(0,r.kt)("strong",{parentName:"p"},"steps")," in your browser."),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Click")," the ",(0,r.kt)("strong",{parentName:"li"},"edit")," button for a project."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Change")," the ",(0,r.kt)("strong",{parentName:"li"},"project name")," in the form."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Click")," ",(0,r.kt)("strong",{parentName:"li"},"save")," on the form."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("strong",{parentName:"li"},"Verify")," the card shows the ",(0,r.kt)("strong",{parentName:"li"},"updated")," data.",(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},"Note that if you refresh your browser page your changes will not persist because the updates are only happening in the browser's memory. We will get a more permanent save working in a future lab when we communicate to our backend web API.")))))),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"-you-have-completed-lab-15"},"\u2714"," You have completed Lab 15"))}d.isMDXComponent=!0}}]);